#version 450

#include "set0.glsl"

layout(local_size_x = 64) in;

struct InstanceData {
  mat4 transform;
};

layout(std430, set = 1, binding = 0) readonly buffer InstanceInput {
  InstanceData instances[];
};

layout(std430, set = 1, binding = 1) buffer VisibilityOutput {
  uint visibility[];
};

bool is_inside_frustum(vec3 center, float radius)
{
  for (int i = 0; i < 6; ++i)
    if (dot(frustum_ubo.planes[i].xyz, center) + frustum_ubo.planes[i].w + radius < 0.0)
      return false;
  return true;
}

void main()
{
  uint id = gl_GlobalInvocationID.x;
  if (id >= instances.length()) return;

  vec3 center = vec3(instances[id].transform[3]);
  float radius = length(instances[id].transform[0].xyz);
  
  visibility[id] = is_inside_frustum(center, radius) ? 1 : 0;
}

name: Build with Conan2 + CCache

on:
  push:
    branches: [main, feat/*, chore/*, fix/*]
    tags: [v*.*.*]
  pull_request:

jobs:
  build:
    runs-on: self-hosted

    strategy:
      matrix:
        compiler: [gcc, clang]

    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_MAXSIZE: 5G
      CCACHE_COMPRESS: "true"
      CCACHE_COMPRESSLEVEL: 6
      CCACHE_DEPEND: "true"
      CCACHE_NOHASHDIR: "true"
      CCACHE_BASEDIR: ${{ github.workspace }}
      CONAN_HOME: ${{ github.workspace }}/.conan2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.compiler }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', '**/*.cpp', '**/*.h') }}
          restore-keys: |
            ccache-${{ matrix.compiler }}-

      - name: Install all required system dependencies (Conan in check mode)
        run: |
          echo ${{ secrets.SUDO_PASSWORD }} | sudo -S apt update
          echo ${{ secrets.SUDO_PASSWORD }} | sudo -S apt install -y --no-install-recommends \
            build-essential \
            cmake \
            ninja-build \
            curl \
            git \
            python3-pip \
            ccache \
            libvulkan-dev

      - name: Install uv and Conan
        run: |
          export CARGO_HOME="$PWD/.cargo"
          export PATH="$CARGO_HOME/bin:$PATH"
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.local/bin/env
          uv venv
          source .venv/bin/activate
          uv pip install conan==2.*

      - name: Configure compiler
        run: |
          if [[ "${{ matrix.compiler }}" == "clang" ]]; then
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          else
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          fi

      - name: Print compiler versions
        run: |
          $CC --version
          $CXX --version

      - name: Configure Conan profiles (without overwriting default)
        run: |
          mkdir -p $CONAN_HOME/profiles
          cp conan/profiles/${{ matrix.compiler }} $CONAN_HOME/profiles/custom

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          conan install . --output-folder=build/conan --build=missing \
            --profile:host=custom --profile:build=custom

      - name: Build
        run: |
          cmake -B build -DCMAKE_TOOLCHAIN_FILE=build/conan/build/Release/generators/conan_toolchain.cmake \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -D CMAKE_BUILD_TYPE=Release
          cmake --build build -j$(nproc)

      - name: Show ccache stats
        run: ccache --show-stats
